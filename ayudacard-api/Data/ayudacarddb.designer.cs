#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ayudacard_api.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ayudacard")]
	public partial class ayudacarddbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAspNetRole(AspNetRole instance);
    partial void UpdateAspNetRole(AspNetRole instance);
    partial void DeleteAspNetRole(AspNetRole instance);
    partial void InsertMstUser(MstUser instance);
    partial void UpdateMstUser(MstUser instance);
    partial void DeleteMstUser(MstUser instance);
    partial void InsertAspNetUserClaim(AspNetUserClaim instance);
    partial void UpdateAspNetUserClaim(AspNetUserClaim instance);
    partial void DeleteAspNetUserClaim(AspNetUserClaim instance);
    partial void InsertAspNetUserLogin(AspNetUserLogin instance);
    partial void UpdateAspNetUserLogin(AspNetUserLogin instance);
    partial void DeleteAspNetUserLogin(AspNetUserLogin instance);
    partial void InsertAspNetUserRole(AspNetUserRole instance);
    partial void UpdateAspNetUserRole(AspNetUserRole instance);
    partial void DeleteAspNetUserRole(AspNetUserRole instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void InsertMstBarangay(MstBarangay instance);
    partial void UpdateMstBarangay(MstBarangay instance);
    partial void DeleteMstBarangay(MstBarangay instance);
    partial void InsertMstBloodType(MstBloodType instance);
    partial void UpdateMstBloodType(MstBloodType instance);
    partial void DeleteMstBloodType(MstBloodType instance);
    partial void InsertMstCitizen(MstCitizen instance);
    partial void UpdateMstCitizen(MstCitizen instance);
    partial void DeleteMstCitizen(MstCitizen instance);
    partial void InsertMstCitizensCard(MstCitizensCard instance);
    partial void UpdateMstCitizensCard(MstCitizensCard instance);
    partial void DeleteMstCitizensCard(MstCitizensCard instance);
    partial void InsertMstCitizensCardStatus(MstCitizensCardStatus instance);
    partial void UpdateMstCitizensCardStatus(MstCitizensCardStatus instance);
    partial void DeleteMstCitizensCardStatus(MstCitizensCardStatus instance);
    partial void InsertMstCitizensChildren(MstCitizensChildren instance);
    partial void UpdateMstCitizensChildren(MstCitizensChildren instance);
    partial void DeleteMstCitizensChildren(MstCitizensChildren instance);
    partial void InsertMstCitizensEducation(MstCitizensEducation instance);
    partial void UpdateMstCitizensEducation(MstCitizensEducation instance);
    partial void DeleteMstCitizensEducation(MstCitizensEducation instance);
    partial void InsertMstCitizensEducationLevel(MstCitizensEducationLevel instance);
    partial void UpdateMstCitizensEducationLevel(MstCitizensEducationLevel instance);
    partial void DeleteMstCitizensEducationLevel(MstCitizensEducationLevel instance);
    partial void InsertMstCitizenship(MstCitizenship instance);
    partial void UpdateMstCitizenship(MstCitizenship instance);
    partial void DeleteMstCitizenship(MstCitizenship instance);
    partial void InsertMstCitizensStatus(MstCitizensStatus instance);
    partial void UpdateMstCitizensStatus(MstCitizensStatus instance);
    partial void DeleteMstCitizensStatus(MstCitizensStatus instance);
    partial void InsertMstCity(MstCity instance);
    partial void UpdateMstCity(MstCity instance);
    partial void DeleteMstCity(MstCity instance);
    partial void InsertMstCivilStatus(MstCivilStatus instance);
    partial void UpdateMstCivilStatus(MstCivilStatus instance);
    partial void DeleteMstCivilStatus(MstCivilStatus instance);
    partial void InsertMstCountry(MstCountry instance);
    partial void UpdateMstCountry(MstCountry instance);
    partial void DeleteMstCountry(MstCountry instance);
    partial void InsertMstOccupation(MstOccupation instance);
    partial void UpdateMstOccupation(MstOccupation instance);
    partial void DeleteMstOccupation(MstOccupation instance);
    partial void InsertMstProvince(MstProvince instance);
    partial void UpdateMstProvince(MstProvince instance);
    partial void DeleteMstProvince(MstProvince instance);
    partial void InsertMstRegion(MstRegion instance);
    partial void UpdateMstRegion(MstRegion instance);
    partial void DeleteMstRegion(MstRegion instance);
    partial void InsertMstSex(MstSex instance);
    partial void UpdateMstSex(MstSex instance);
    partial void DeleteMstSex(MstSex instance);
    partial void InsertMstTypeOfCitizenship(MstTypeOfCitizenship instance);
    partial void UpdateMstTypeOfCitizenship(MstTypeOfCitizenship instance);
    partial void DeleteMstTypeOfCitizenship(MstTypeOfCitizenship instance);
    #endregion
		
		public ayudacarddbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ayudacarddbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ayudacarddbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ayudacarddbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ayudacarddbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspNetRole> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRole>();
			}
		}
		
		public System.Data.Linq.Table<MstUser> MstUsers
		{
			get
			{
				return this.GetTable<MstUser>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<MstBarangay> MstBarangays
		{
			get
			{
				return this.GetTable<MstBarangay>();
			}
		}
		
		public System.Data.Linq.Table<MstBloodType> MstBloodTypes
		{
			get
			{
				return this.GetTable<MstBloodType>();
			}
		}
		
		public System.Data.Linq.Table<MstCitizen> MstCitizens
		{
			get
			{
				return this.GetTable<MstCitizen>();
			}
		}
		
		public System.Data.Linq.Table<MstCitizensCard> MstCitizensCards
		{
			get
			{
				return this.GetTable<MstCitizensCard>();
			}
		}
		
		public System.Data.Linq.Table<MstCitizensCardStatus> MstCitizensCardStatus
		{
			get
			{
				return this.GetTable<MstCitizensCardStatus>();
			}
		}
		
		public System.Data.Linq.Table<MstCitizensChildren> MstCitizensChildrens
		{
			get
			{
				return this.GetTable<MstCitizensChildren>();
			}
		}
		
		public System.Data.Linq.Table<MstCitizensEducation> MstCitizensEducations
		{
			get
			{
				return this.GetTable<MstCitizensEducation>();
			}
		}
		
		public System.Data.Linq.Table<MstCitizensEducationLevel> MstCitizensEducationLevels
		{
			get
			{
				return this.GetTable<MstCitizensEducationLevel>();
			}
		}
		
		public System.Data.Linq.Table<MstCitizenship> MstCitizenships
		{
			get
			{
				return this.GetTable<MstCitizenship>();
			}
		}
		
		public System.Data.Linq.Table<MstCitizensStatus> MstCitizensStatus
		{
			get
			{
				return this.GetTable<MstCitizensStatus>();
			}
		}
		
		public System.Data.Linq.Table<MstCity> MstCities
		{
			get
			{
				return this.GetTable<MstCity>();
			}
		}
		
		public System.Data.Linq.Table<MstCivilStatus> MstCivilStatus
		{
			get
			{
				return this.GetTable<MstCivilStatus>();
			}
		}
		
		public System.Data.Linq.Table<MstCountry> MstCountries
		{
			get
			{
				return this.GetTable<MstCountry>();
			}
		}
		
		public System.Data.Linq.Table<MstOccupation> MstOccupations
		{
			get
			{
				return this.GetTable<MstOccupation>();
			}
		}
		
		public System.Data.Linq.Table<MstProvince> MstProvinces
		{
			get
			{
				return this.GetTable<MstProvince>();
			}
		}
		
		public System.Data.Linq.Table<MstRegion> MstRegions
		{
			get
			{
				return this.GetTable<MstRegion>();
			}
		}
		
		public System.Data.Linq.Table<MstSex> MstSexes
		{
			get
			{
				return this.GetTable<MstSex>();
			}
		}
		
		public System.Data.Linq.Table<MstTypeOfCitizenship> MstTypeOfCitizenships
		{
			get
			{
				return this.GetTable<MstTypeOfCitizenship>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRole()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstUser")]
	public partial class MstUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AspNetUserId;
		
		private string _Username;
		
		private string _Password;
		
		private string _Fullname;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
		private EntitySet<MstCitizen> _MstCitizens1;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAspNetUserIdChanging(string value);
    partial void OnAspNetUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    #endregion
		
		public MstUser()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			this._MstCitizens1 = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens1), new Action<MstCitizen>(this.detach_MstCitizens1));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AspNetUserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string AspNetUserId
		{
			get
			{
				return this._AspNetUserId;
			}
			set
			{
				if ((this._AspNetUserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAspNetUserIdChanging(value);
					this.SendPropertyChanging();
					this._AspNetUserId = value;
					this.SendPropertyChanged("AspNetUserId");
					this.OnAspNetUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="CreatedByUserId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstCitizen1", Storage="_MstCitizens1", ThisKey="Id", OtherKey="UpdatedByUserId")]
		public EntitySet<MstCitizen> MstCitizens1
		{
			get
			{
				return this._MstCitizens1;
			}
			set
			{
				this._MstCitizens1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MstUser", Storage="_AspNetUser", ThisKey="AspNetUserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.MstUsers.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.MstUsers.Add(this);
						this._AspNetUserId = value.Id;
					}
					else
					{
						this._AspNetUserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstUser = null;
		}
		
		private void attach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstUser1 = this;
		}
		
		private void detach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstUser1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaim()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogin()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRole()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private EntitySet<MstUser> _MstUsers;
		
		private EntitySet<AspNetUserClaim> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogin> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public AspNetUser()
		{
			this._MstUsers = new EntitySet<MstUser>(new Action<MstUser>(this.attach_MstUsers), new Action<MstUser>(this.detach_MstUsers));
			this._AspNetUserClaims = new EntitySet<AspNetUserClaim>(new Action<AspNetUserClaim>(this.attach_AspNetUserClaims), new Action<AspNetUserClaim>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogin>(new Action<AspNetUserLogin>(this.attach_AspNetUserLogins), new Action<AspNetUserLogin>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MstUser", Storage="_MstUsers", ThisKey="Id", OtherKey="AspNetUserId")]
		public EntitySet<MstUser> MstUsers
		{
			get
			{
				return this._MstUsers;
			}
			set
			{
				this._MstUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstUsers(MstUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_MstUsers(MstUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstBarangay")]
	public partial class MstBarangay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Barangay;
		
		private string _BarangayChairman;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
		private EntitySet<MstCitizen> _MstCitizens1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBarangayChanging(string value);
    partial void OnBarangayChanged();
    partial void OnBarangayChairmanChanging(string value);
    partial void OnBarangayChairmanChanged();
    #endregion
		
		public MstBarangay()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			this._MstCitizens1 = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens1), new Action<MstCitizen>(this.detach_MstCitizens1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barangay", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Barangay
		{
			get
			{
				return this._Barangay;
			}
			set
			{
				if ((this._Barangay != value))
				{
					this.OnBarangayChanging(value);
					this.SendPropertyChanging();
					this._Barangay = value;
					this.SendPropertyChanged("Barangay");
					this.OnBarangayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarangayChairman", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string BarangayChairman
		{
			get
			{
				return this._BarangayChairman;
			}
			set
			{
				if ((this._BarangayChairman != value))
				{
					this.OnBarangayChairmanChanging(value);
					this.SendPropertyChanging();
					this._BarangayChairman = value;
					this.SendPropertyChanged("BarangayChairman");
					this.OnBarangayChairmanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBarangay_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="ResidentialBarangayId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBarangay_MstCitizen1", Storage="_MstCitizens1", ThisKey="Id", OtherKey="PermanentBarangayId")]
		public EntitySet<MstCitizen> MstCitizens1
		{
			get
			{
				return this._MstCitizens1;
			}
			set
			{
				this._MstCitizens1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstBarangay = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstBarangay = null;
		}
		
		private void attach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstBarangay1 = this;
		}
		
		private void detach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstBarangay1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstBloodType")]
	public partial class MstBloodType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BloodType;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBloodTypeChanging(string value);
    partial void OnBloodTypeChanged();
    #endregion
		
		public MstBloodType()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BloodType
		{
			get
			{
				return this._BloodType;
			}
			set
			{
				if ((this._BloodType != value))
				{
					this.OnBloodTypeChanging(value);
					this.SendPropertyChanging();
					this._BloodType = value;
					this.SendPropertyChanged("BloodType");
					this.OnBloodTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBloodType_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="BloodTypeId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstBloodType = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstBloodType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCitizen")]
	public partial class MstCitizen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Surname;
		
		private string _Firstname;
		
		private string _Middlename;
		
		private string _Extensionname;
		
		private System.DateTime _DateOfBirth;
		
		private string _PlaceOfBirth;
		
		private int _SexId;
		
		private int _CivilStatusId;
		
		private decimal _Height;
		
		private decimal _Weight;
		
		private int _BloodTypeId;
		
		private string _GSISNumber;
		
		private string _HDMFNumber;
		
		private string _PhilHealthNumber;
		
		private string _SSSNumber;
		
		private string _TINNumber;
		
		private string _AgencyEmployeeNumber;
		
		private int _CitizenshipId;
		
		private int _TypeOfCitizenshipId;
		
		private string _DualCitizenshipCountry;
		
		private string _ResidentialNumber;
		
		private string _ResidentialStreet;
		
		private string _ResidentialVillage;
		
		private int _ResidentialBarangayId;
		
		private int _ResidentialCityId;
		
		private int _ResidentialProvinceId;
		
		private string _ResidentialZipCode;
		
		private string _PermanentNumber;
		
		private string _PermanentStreet;
		
		private string _PermanentVillage;
		
		private int _PermanentBarangayId;
		
		private int _PermanentCityId;
		
		private int _PermanentProvinceId;
		
		private string _PermanentZipCode;
		
		private string _TelephoneNumber;
		
		private string _MobileNumber;
		
		private string _EmailAddress;
		
		private int _OccupationId;
		
		private string _EmployerName;
		
		private string _EmployerAddress;
		
		private string _EmployerTelephoneNumber;
		
		private string _SpouseSurname;
		
		private string _SpouseFirstname;
		
		private string _SpouseMiddlename;
		
		private string _SpouseExtensionname;
		
		private int _SpouseOccupationId;
		
		private string _SpouseEmployerName;
		
		private string _SpouseEmployerAddress;
		
		private string _FatherSurname;
		
		private string _FatherFirstname;
		
		private string _FatherMiddlename;
		
		private string _FatherExtensionname;
		
		private string _MotherSurname;
		
		private string _MotherFirstname;
		
		private string _MotherMiddlename;
		
		private string _MotherExtensionname;
		
		private string _PictureURL;
		
		private int _CitizenStatusId;
		
		private int _CreatedByUserId;
		
		private System.DateTime _CreatedDateTime;
		
		private int _UpdatedByUserId;
		
		private System.DateTime _UpdatedDateTime;
		
		private EntitySet<MstCitizensCard> _MstCitizensCards;
		
		private EntitySet<MstCitizensChildren> _MstCitizensChildrens;
		
		private EntitySet<MstCitizensEducation> _MstCitizensEducations;
		
		private EntityRef<MstBarangay> _MstBarangay;
		
		private EntityRef<MstBarangay> _MstBarangay1;
		
		private EntityRef<MstBloodType> _MstBloodType;
		
		private EntityRef<MstUser> _MstUser;
		
		private EntityRef<MstUser> _MstUser1;
		
		private EntityRef<MstCitizenship> _MstCitizenship;
		
		private EntityRef<MstCitizensStatus> _MstCitizensStatus;
		
		private EntityRef<MstCity> _MstCity;
		
		private EntityRef<MstCity> _MstCity1;
		
		private EntityRef<MstCivilStatus> _MstCivilStatus;
		
		private EntityRef<MstOccupation> _MstOccupation;
		
		private EntityRef<MstOccupation> _MstOccupation1;
		
		private EntityRef<MstProvince> _MstProvince;
		
		private EntityRef<MstProvince> _MstProvince1;
		
		private EntityRef<MstSex> _MstSex;
		
		private EntityRef<MstTypeOfCitizenship> _MstTypeOfCitizenship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnMiddlenameChanging(string value);
    partial void OnMiddlenameChanged();
    partial void OnExtensionnameChanging(string value);
    partial void OnExtensionnameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnPlaceOfBirthChanging(string value);
    partial void OnPlaceOfBirthChanged();
    partial void OnSexIdChanging(int value);
    partial void OnSexIdChanged();
    partial void OnCivilStatusIdChanging(int value);
    partial void OnCivilStatusIdChanged();
    partial void OnHeightChanging(decimal value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(decimal value);
    partial void OnWeightChanged();
    partial void OnBloodTypeIdChanging(int value);
    partial void OnBloodTypeIdChanged();
    partial void OnGSISNumberChanging(string value);
    partial void OnGSISNumberChanged();
    partial void OnHDMFNumberChanging(string value);
    partial void OnHDMFNumberChanged();
    partial void OnPhilHealthNumberChanging(string value);
    partial void OnPhilHealthNumberChanged();
    partial void OnSSSNumberChanging(string value);
    partial void OnSSSNumberChanged();
    partial void OnTINNumberChanging(string value);
    partial void OnTINNumberChanged();
    partial void OnAgencyEmployeeNumberChanging(string value);
    partial void OnAgencyEmployeeNumberChanged();
    partial void OnCitizenshipIdChanging(int value);
    partial void OnCitizenshipIdChanged();
    partial void OnTypeOfCitizenshipIdChanging(int value);
    partial void OnTypeOfCitizenshipIdChanged();
    partial void OnDualCitizenshipCountryChanging(string value);
    partial void OnDualCitizenshipCountryChanged();
    partial void OnResidentialNumberChanging(string value);
    partial void OnResidentialNumberChanged();
    partial void OnResidentialStreetChanging(string value);
    partial void OnResidentialStreetChanged();
    partial void OnResidentialVillageChanging(string value);
    partial void OnResidentialVillageChanged();
    partial void OnResidentialBarangayIdChanging(int value);
    partial void OnResidentialBarangayIdChanged();
    partial void OnResidentialCityIdChanging(int value);
    partial void OnResidentialCityIdChanged();
    partial void OnResidentialProvinceIdChanging(int value);
    partial void OnResidentialProvinceIdChanged();
    partial void OnResidentialZipCodeChanging(string value);
    partial void OnResidentialZipCodeChanged();
    partial void OnPermanentNumberChanging(string value);
    partial void OnPermanentNumberChanged();
    partial void OnPermanentStreetChanging(string value);
    partial void OnPermanentStreetChanged();
    partial void OnPermanentVillageChanging(string value);
    partial void OnPermanentVillageChanged();
    partial void OnPermanentBarangayIdChanging(int value);
    partial void OnPermanentBarangayIdChanged();
    partial void OnPermanentCityIdChanging(int value);
    partial void OnPermanentCityIdChanged();
    partial void OnPermanentProvinceIdChanging(int value);
    partial void OnPermanentProvinceIdChanged();
    partial void OnPermanentZipCodeChanging(string value);
    partial void OnPermanentZipCodeChanged();
    partial void OnTelephoneNumberChanging(string value);
    partial void OnTelephoneNumberChanged();
    partial void OnMobileNumberChanging(string value);
    partial void OnMobileNumberChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnOccupationIdChanging(int value);
    partial void OnOccupationIdChanged();
    partial void OnEmployerNameChanging(string value);
    partial void OnEmployerNameChanged();
    partial void OnEmployerAddressChanging(string value);
    partial void OnEmployerAddressChanged();
    partial void OnEmployerTelephoneNumberChanging(string value);
    partial void OnEmployerTelephoneNumberChanged();
    partial void OnSpouseSurnameChanging(string value);
    partial void OnSpouseSurnameChanged();
    partial void OnSpouseFirstnameChanging(string value);
    partial void OnSpouseFirstnameChanged();
    partial void OnSpouseMiddlenameChanging(string value);
    partial void OnSpouseMiddlenameChanged();
    partial void OnSpouseExtensionnameChanging(string value);
    partial void OnSpouseExtensionnameChanged();
    partial void OnSpouseOccupationIdChanging(int value);
    partial void OnSpouseOccupationIdChanged();
    partial void OnSpouseEmployerNameChanging(string value);
    partial void OnSpouseEmployerNameChanged();
    partial void OnSpouseEmployerAddressChanging(string value);
    partial void OnSpouseEmployerAddressChanged();
    partial void OnFatherSurnameChanging(string value);
    partial void OnFatherSurnameChanged();
    partial void OnFatherFirstnameChanging(string value);
    partial void OnFatherFirstnameChanged();
    partial void OnFatherMiddlenameChanging(string value);
    partial void OnFatherMiddlenameChanged();
    partial void OnFatherExtensionnameChanging(string value);
    partial void OnFatherExtensionnameChanged();
    partial void OnMotherSurnameChanging(string value);
    partial void OnMotherSurnameChanged();
    partial void OnMotherFirstnameChanging(string value);
    partial void OnMotherFirstnameChanged();
    partial void OnMotherMiddlenameChanging(string value);
    partial void OnMotherMiddlenameChanged();
    partial void OnMotherExtensionnameChanging(string value);
    partial void OnMotherExtensionnameChanged();
    partial void OnPictureURLChanging(string value);
    partial void OnPictureURLChanged();
    partial void OnCitizenStatusIdChanging(int value);
    partial void OnCitizenStatusIdChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    partial void OnUpdatedByUserIdChanging(int value);
    partial void OnUpdatedByUserIdChanged();
    partial void OnUpdatedDateTimeChanging(System.DateTime value);
    partial void OnUpdatedDateTimeChanged();
    #endregion
		
		public MstCitizen()
		{
			this._MstCitizensCards = new EntitySet<MstCitizensCard>(new Action<MstCitizensCard>(this.attach_MstCitizensCards), new Action<MstCitizensCard>(this.detach_MstCitizensCards));
			this._MstCitizensChildrens = new EntitySet<MstCitizensChildren>(new Action<MstCitizensChildren>(this.attach_MstCitizensChildrens), new Action<MstCitizensChildren>(this.detach_MstCitizensChildrens));
			this._MstCitizensEducations = new EntitySet<MstCitizensEducation>(new Action<MstCitizensEducation>(this.attach_MstCitizensEducations), new Action<MstCitizensEducation>(this.detach_MstCitizensEducations));
			this._MstBarangay = default(EntityRef<MstBarangay>);
			this._MstBarangay1 = default(EntityRef<MstBarangay>);
			this._MstBloodType = default(EntityRef<MstBloodType>);
			this._MstUser = default(EntityRef<MstUser>);
			this._MstUser1 = default(EntityRef<MstUser>);
			this._MstCitizenship = default(EntityRef<MstCitizenship>);
			this._MstCitizensStatus = default(EntityRef<MstCitizensStatus>);
			this._MstCity = default(EntityRef<MstCity>);
			this._MstCity1 = default(EntityRef<MstCity>);
			this._MstCivilStatus = default(EntityRef<MstCivilStatus>);
			this._MstOccupation = default(EntityRef<MstOccupation>);
			this._MstOccupation1 = default(EntityRef<MstOccupation>);
			this._MstProvince = default(EntityRef<MstProvince>);
			this._MstProvince1 = default(EntityRef<MstProvince>);
			this._MstSex = default(EntityRef<MstSex>);
			this._MstTypeOfCitizenship = default(EntityRef<MstTypeOfCitizenship>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Middlename", DbType="NVarChar(50)")]
		public string Middlename
		{
			get
			{
				return this._Middlename;
			}
			set
			{
				if ((this._Middlename != value))
				{
					this.OnMiddlenameChanging(value);
					this.SendPropertyChanging();
					this._Middlename = value;
					this.SendPropertyChanged("Middlename");
					this.OnMiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extensionname", DbType="NVarChar(50)")]
		public string Extensionname
		{
			get
			{
				return this._Extensionname;
			}
			set
			{
				if ((this._Extensionname != value))
				{
					this.OnExtensionnameChanging(value);
					this.SendPropertyChanging();
					this._Extensionname = value;
					this.SendPropertyChanged("Extensionname");
					this.OnExtensionnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceOfBirth", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PlaceOfBirth
		{
			get
			{
				return this._PlaceOfBirth;
			}
			set
			{
				if ((this._PlaceOfBirth != value))
				{
					this.OnPlaceOfBirthChanging(value);
					this.SendPropertyChanging();
					this._PlaceOfBirth = value;
					this.SendPropertyChanged("PlaceOfBirth");
					this.OnPlaceOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexId", DbType="Int NOT NULL")]
		public int SexId
		{
			get
			{
				return this._SexId;
			}
			set
			{
				if ((this._SexId != value))
				{
					if (this._MstSex.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSexIdChanging(value);
					this.SendPropertyChanging();
					this._SexId = value;
					this.SendPropertyChanged("SexId");
					this.OnSexIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CivilStatusId", DbType="Int NOT NULL")]
		public int CivilStatusId
		{
			get
			{
				return this._CivilStatusId;
			}
			set
			{
				if ((this._CivilStatusId != value))
				{
					if (this._MstCivilStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCivilStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CivilStatusId = value;
					this.SendPropertyChanged("CivilStatusId");
					this.OnCivilStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(18,2) NOT NULL")]
		public decimal Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,2) NOT NULL")]
		public decimal Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodTypeId", DbType="Int NOT NULL")]
		public int BloodTypeId
		{
			get
			{
				return this._BloodTypeId;
			}
			set
			{
				if ((this._BloodTypeId != value))
				{
					if (this._MstBloodType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBloodTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BloodTypeId = value;
					this.SendPropertyChanged("BloodTypeId");
					this.OnBloodTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GSISNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string GSISNumber
		{
			get
			{
				return this._GSISNumber;
			}
			set
			{
				if ((this._GSISNumber != value))
				{
					this.OnGSISNumberChanging(value);
					this.SendPropertyChanging();
					this._GSISNumber = value;
					this.SendPropertyChanged("GSISNumber");
					this.OnGSISNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HDMFNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string HDMFNumber
		{
			get
			{
				return this._HDMFNumber;
			}
			set
			{
				if ((this._HDMFNumber != value))
				{
					this.OnHDMFNumberChanging(value);
					this.SendPropertyChanging();
					this._HDMFNumber = value;
					this.SendPropertyChanged("HDMFNumber");
					this.OnHDMFNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhilHealthNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PhilHealthNumber
		{
			get
			{
				return this._PhilHealthNumber;
			}
			set
			{
				if ((this._PhilHealthNumber != value))
				{
					this.OnPhilHealthNumberChanging(value);
					this.SendPropertyChanging();
					this._PhilHealthNumber = value;
					this.SendPropertyChanged("PhilHealthNumber");
					this.OnPhilHealthNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSSNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string SSSNumber
		{
			get
			{
				return this._SSSNumber;
			}
			set
			{
				if ((this._SSSNumber != value))
				{
					this.OnSSSNumberChanging(value);
					this.SendPropertyChanging();
					this._SSSNumber = value;
					this.SendPropertyChanged("SSSNumber");
					this.OnSSSNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TINNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string TINNumber
		{
			get
			{
				return this._TINNumber;
			}
			set
			{
				if ((this._TINNumber != value))
				{
					this.OnTINNumberChanging(value);
					this.SendPropertyChanging();
					this._TINNumber = value;
					this.SendPropertyChanged("TINNumber");
					this.OnTINNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgencyEmployeeNumber", DbType="NVarChar(250)")]
		public string AgencyEmployeeNumber
		{
			get
			{
				return this._AgencyEmployeeNumber;
			}
			set
			{
				if ((this._AgencyEmployeeNumber != value))
				{
					this.OnAgencyEmployeeNumberChanging(value);
					this.SendPropertyChanging();
					this._AgencyEmployeeNumber = value;
					this.SendPropertyChanged("AgencyEmployeeNumber");
					this.OnAgencyEmployeeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenshipId", DbType="Int NOT NULL")]
		public int CitizenshipId
		{
			get
			{
				return this._CitizenshipId;
			}
			set
			{
				if ((this._CitizenshipId != value))
				{
					if (this._MstCitizenship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCitizenshipIdChanging(value);
					this.SendPropertyChanging();
					this._CitizenshipId = value;
					this.SendPropertyChanged("CitizenshipId");
					this.OnCitizenshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfCitizenshipId", DbType="Int NOT NULL")]
		public int TypeOfCitizenshipId
		{
			get
			{
				return this._TypeOfCitizenshipId;
			}
			set
			{
				if ((this._TypeOfCitizenshipId != value))
				{
					if (this._MstTypeOfCitizenship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeOfCitizenshipIdChanging(value);
					this.SendPropertyChanging();
					this._TypeOfCitizenshipId = value;
					this.SendPropertyChanged("TypeOfCitizenshipId");
					this.OnTypeOfCitizenshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DualCitizenshipCountry", DbType="NVarChar(250)")]
		public string DualCitizenshipCountry
		{
			get
			{
				return this._DualCitizenshipCountry;
			}
			set
			{
				if ((this._DualCitizenshipCountry != value))
				{
					this.OnDualCitizenshipCountryChanging(value);
					this.SendPropertyChanging();
					this._DualCitizenshipCountry = value;
					this.SendPropertyChanged("DualCitizenshipCountry");
					this.OnDualCitizenshipCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidentialNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ResidentialNumber
		{
			get
			{
				return this._ResidentialNumber;
			}
			set
			{
				if ((this._ResidentialNumber != value))
				{
					this.OnResidentialNumberChanging(value);
					this.SendPropertyChanging();
					this._ResidentialNumber = value;
					this.SendPropertyChanged("ResidentialNumber");
					this.OnResidentialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidentialStreet", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ResidentialStreet
		{
			get
			{
				return this._ResidentialStreet;
			}
			set
			{
				if ((this._ResidentialStreet != value))
				{
					this.OnResidentialStreetChanging(value);
					this.SendPropertyChanging();
					this._ResidentialStreet = value;
					this.SendPropertyChanged("ResidentialStreet");
					this.OnResidentialStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidentialVillage", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ResidentialVillage
		{
			get
			{
				return this._ResidentialVillage;
			}
			set
			{
				if ((this._ResidentialVillage != value))
				{
					this.OnResidentialVillageChanging(value);
					this.SendPropertyChanging();
					this._ResidentialVillage = value;
					this.SendPropertyChanged("ResidentialVillage");
					this.OnResidentialVillageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidentialBarangayId", DbType="Int NOT NULL")]
		public int ResidentialBarangayId
		{
			get
			{
				return this._ResidentialBarangayId;
			}
			set
			{
				if ((this._ResidentialBarangayId != value))
				{
					if (this._MstBarangay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResidentialBarangayIdChanging(value);
					this.SendPropertyChanging();
					this._ResidentialBarangayId = value;
					this.SendPropertyChanged("ResidentialBarangayId");
					this.OnResidentialBarangayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidentialCityId", DbType="Int NOT NULL")]
		public int ResidentialCityId
		{
			get
			{
				return this._ResidentialCityId;
			}
			set
			{
				if ((this._ResidentialCityId != value))
				{
					if (this._MstCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResidentialCityIdChanging(value);
					this.SendPropertyChanging();
					this._ResidentialCityId = value;
					this.SendPropertyChanged("ResidentialCityId");
					this.OnResidentialCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidentialProvinceId", DbType="Int NOT NULL")]
		public int ResidentialProvinceId
		{
			get
			{
				return this._ResidentialProvinceId;
			}
			set
			{
				if ((this._ResidentialProvinceId != value))
				{
					if (this._MstProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResidentialProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ResidentialProvinceId = value;
					this.SendPropertyChanged("ResidentialProvinceId");
					this.OnResidentialProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidentialZipCode", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ResidentialZipCode
		{
			get
			{
				return this._ResidentialZipCode;
			}
			set
			{
				if ((this._ResidentialZipCode != value))
				{
					this.OnResidentialZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ResidentialZipCode = value;
					this.SendPropertyChanged("ResidentialZipCode");
					this.OnResidentialZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermanentNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PermanentNumber
		{
			get
			{
				return this._PermanentNumber;
			}
			set
			{
				if ((this._PermanentNumber != value))
				{
					this.OnPermanentNumberChanging(value);
					this.SendPropertyChanging();
					this._PermanentNumber = value;
					this.SendPropertyChanged("PermanentNumber");
					this.OnPermanentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermanentStreet", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PermanentStreet
		{
			get
			{
				return this._PermanentStreet;
			}
			set
			{
				if ((this._PermanentStreet != value))
				{
					this.OnPermanentStreetChanging(value);
					this.SendPropertyChanging();
					this._PermanentStreet = value;
					this.SendPropertyChanged("PermanentStreet");
					this.OnPermanentStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermanentVillage", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PermanentVillage
		{
			get
			{
				return this._PermanentVillage;
			}
			set
			{
				if ((this._PermanentVillage != value))
				{
					this.OnPermanentVillageChanging(value);
					this.SendPropertyChanging();
					this._PermanentVillage = value;
					this.SendPropertyChanged("PermanentVillage");
					this.OnPermanentVillageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermanentBarangayId", DbType="Int NOT NULL")]
		public int PermanentBarangayId
		{
			get
			{
				return this._PermanentBarangayId;
			}
			set
			{
				if ((this._PermanentBarangayId != value))
				{
					if (this._MstBarangay1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermanentBarangayIdChanging(value);
					this.SendPropertyChanging();
					this._PermanentBarangayId = value;
					this.SendPropertyChanged("PermanentBarangayId");
					this.OnPermanentBarangayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermanentCityId", DbType="Int NOT NULL")]
		public int PermanentCityId
		{
			get
			{
				return this._PermanentCityId;
			}
			set
			{
				if ((this._PermanentCityId != value))
				{
					if (this._MstCity1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermanentCityIdChanging(value);
					this.SendPropertyChanging();
					this._PermanentCityId = value;
					this.SendPropertyChanged("PermanentCityId");
					this.OnPermanentCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermanentProvinceId", DbType="Int NOT NULL")]
		public int PermanentProvinceId
		{
			get
			{
				return this._PermanentProvinceId;
			}
			set
			{
				if ((this._PermanentProvinceId != value))
				{
					if (this._MstProvince1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermanentProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._PermanentProvinceId = value;
					this.SendPropertyChanged("PermanentProvinceId");
					this.OnPermanentProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermanentZipCode", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PermanentZipCode
		{
			get
			{
				return this._PermanentZipCode;
			}
			set
			{
				if ((this._PermanentZipCode != value))
				{
					this.OnPermanentZipCodeChanging(value);
					this.SendPropertyChanging();
					this._PermanentZipCode = value;
					this.SendPropertyChanged("PermanentZipCode");
					this.OnPermanentZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this.OnTelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._TelephoneNumber = value;
					this.SendPropertyChanged("TelephoneNumber");
					this.OnTelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string MobileNumber
		{
			get
			{
				return this._MobileNumber;
			}
			set
			{
				if ((this._MobileNumber != value))
				{
					this.OnMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._MobileNumber = value;
					this.SendPropertyChanged("MobileNumber");
					this.OnMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(250)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationId", DbType="Int NOT NULL")]
		public int OccupationId
		{
			get
			{
				return this._OccupationId;
			}
			set
			{
				if ((this._OccupationId != value))
				{
					if (this._MstOccupation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOccupationIdChanging(value);
					this.SendPropertyChanging();
					this._OccupationId = value;
					this.SendPropertyChanged("OccupationId");
					this.OnOccupationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string EmployerName
		{
			get
			{
				return this._EmployerName;
			}
			set
			{
				if ((this._EmployerName != value))
				{
					this.OnEmployerNameChanging(value);
					this.SendPropertyChanging();
					this._EmployerName = value;
					this.SendPropertyChanged("EmployerName");
					this.OnEmployerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerAddress", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string EmployerAddress
		{
			get
			{
				return this._EmployerAddress;
			}
			set
			{
				if ((this._EmployerAddress != value))
				{
					this.OnEmployerAddressChanging(value);
					this.SendPropertyChanging();
					this._EmployerAddress = value;
					this.SendPropertyChanged("EmployerAddress");
					this.OnEmployerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerTelephoneNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string EmployerTelephoneNumber
		{
			get
			{
				return this._EmployerTelephoneNumber;
			}
			set
			{
				if ((this._EmployerTelephoneNumber != value))
				{
					this.OnEmployerTelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._EmployerTelephoneNumber = value;
					this.SendPropertyChanged("EmployerTelephoneNumber");
					this.OnEmployerTelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseSurname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SpouseSurname
		{
			get
			{
				return this._SpouseSurname;
			}
			set
			{
				if ((this._SpouseSurname != value))
				{
					this.OnSpouseSurnameChanging(value);
					this.SendPropertyChanging();
					this._SpouseSurname = value;
					this.SendPropertyChanged("SpouseSurname");
					this.OnSpouseSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseFirstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SpouseFirstname
		{
			get
			{
				return this._SpouseFirstname;
			}
			set
			{
				if ((this._SpouseFirstname != value))
				{
					this.OnSpouseFirstnameChanging(value);
					this.SendPropertyChanging();
					this._SpouseFirstname = value;
					this.SendPropertyChanged("SpouseFirstname");
					this.OnSpouseFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseMiddlename", DbType="NVarChar(50)")]
		public string SpouseMiddlename
		{
			get
			{
				return this._SpouseMiddlename;
			}
			set
			{
				if ((this._SpouseMiddlename != value))
				{
					this.OnSpouseMiddlenameChanging(value);
					this.SendPropertyChanging();
					this._SpouseMiddlename = value;
					this.SendPropertyChanged("SpouseMiddlename");
					this.OnSpouseMiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseExtensionname", DbType="NVarChar(50)")]
		public string SpouseExtensionname
		{
			get
			{
				return this._SpouseExtensionname;
			}
			set
			{
				if ((this._SpouseExtensionname != value))
				{
					this.OnSpouseExtensionnameChanging(value);
					this.SendPropertyChanging();
					this._SpouseExtensionname = value;
					this.SendPropertyChanged("SpouseExtensionname");
					this.OnSpouseExtensionnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseOccupationId", DbType="Int NOT NULL")]
		public int SpouseOccupationId
		{
			get
			{
				return this._SpouseOccupationId;
			}
			set
			{
				if ((this._SpouseOccupationId != value))
				{
					if (this._MstOccupation1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpouseOccupationIdChanging(value);
					this.SendPropertyChanging();
					this._SpouseOccupationId = value;
					this.SendPropertyChanged("SpouseOccupationId");
					this.OnSpouseOccupationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseEmployerName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string SpouseEmployerName
		{
			get
			{
				return this._SpouseEmployerName;
			}
			set
			{
				if ((this._SpouseEmployerName != value))
				{
					this.OnSpouseEmployerNameChanging(value);
					this.SendPropertyChanging();
					this._SpouseEmployerName = value;
					this.SendPropertyChanged("SpouseEmployerName");
					this.OnSpouseEmployerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseEmployerAddress", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string SpouseEmployerAddress
		{
			get
			{
				return this._SpouseEmployerAddress;
			}
			set
			{
				if ((this._SpouseEmployerAddress != value))
				{
					this.OnSpouseEmployerAddressChanging(value);
					this.SendPropertyChanging();
					this._SpouseEmployerAddress = value;
					this.SendPropertyChanged("SpouseEmployerAddress");
					this.OnSpouseEmployerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherSurname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FatherSurname
		{
			get
			{
				return this._FatherSurname;
			}
			set
			{
				if ((this._FatherSurname != value))
				{
					this.OnFatherSurnameChanging(value);
					this.SendPropertyChanging();
					this._FatherSurname = value;
					this.SendPropertyChanged("FatherSurname");
					this.OnFatherSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherFirstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FatherFirstname
		{
			get
			{
				return this._FatherFirstname;
			}
			set
			{
				if ((this._FatherFirstname != value))
				{
					this.OnFatherFirstnameChanging(value);
					this.SendPropertyChanging();
					this._FatherFirstname = value;
					this.SendPropertyChanged("FatherFirstname");
					this.OnFatherFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherMiddlename", DbType="NVarChar(50)")]
		public string FatherMiddlename
		{
			get
			{
				return this._FatherMiddlename;
			}
			set
			{
				if ((this._FatherMiddlename != value))
				{
					this.OnFatherMiddlenameChanging(value);
					this.SendPropertyChanging();
					this._FatherMiddlename = value;
					this.SendPropertyChanged("FatherMiddlename");
					this.OnFatherMiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherExtensionname", DbType="NVarChar(50)")]
		public string FatherExtensionname
		{
			get
			{
				return this._FatherExtensionname;
			}
			set
			{
				if ((this._FatherExtensionname != value))
				{
					this.OnFatherExtensionnameChanging(value);
					this.SendPropertyChanging();
					this._FatherExtensionname = value;
					this.SendPropertyChanged("FatherExtensionname");
					this.OnFatherExtensionnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherSurname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MotherSurname
		{
			get
			{
				return this._MotherSurname;
			}
			set
			{
				if ((this._MotherSurname != value))
				{
					this.OnMotherSurnameChanging(value);
					this.SendPropertyChanging();
					this._MotherSurname = value;
					this.SendPropertyChanged("MotherSurname");
					this.OnMotherSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherFirstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MotherFirstname
		{
			get
			{
				return this._MotherFirstname;
			}
			set
			{
				if ((this._MotherFirstname != value))
				{
					this.OnMotherFirstnameChanging(value);
					this.SendPropertyChanging();
					this._MotherFirstname = value;
					this.SendPropertyChanged("MotherFirstname");
					this.OnMotherFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherMiddlename", DbType="NVarChar(50)")]
		public string MotherMiddlename
		{
			get
			{
				return this._MotherMiddlename;
			}
			set
			{
				if ((this._MotherMiddlename != value))
				{
					this.OnMotherMiddlenameChanging(value);
					this.SendPropertyChanging();
					this._MotherMiddlename = value;
					this.SendPropertyChanged("MotherMiddlename");
					this.OnMotherMiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherExtensionname", DbType="NVarChar(50)")]
		public string MotherExtensionname
		{
			get
			{
				return this._MotherExtensionname;
			}
			set
			{
				if ((this._MotherExtensionname != value))
				{
					this.OnMotherExtensionnameChanging(value);
					this.SendPropertyChanging();
					this._MotherExtensionname = value;
					this.SendPropertyChanged("MotherExtensionname");
					this.OnMotherExtensionnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureURL", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string PictureURL
		{
			get
			{
				return this._PictureURL;
			}
			set
			{
				if ((this._PictureURL != value))
				{
					this.OnPictureURLChanging(value);
					this.SendPropertyChanging();
					this._PictureURL = value;
					this.SendPropertyChanged("PictureURL");
					this.OnPictureURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenStatusId", DbType="Int NOT NULL")]
		public int CitizenStatusId
		{
			get
			{
				return this._CitizenStatusId;
			}
			set
			{
				if ((this._CitizenStatusId != value))
				{
					if (this._MstCitizensStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCitizenStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CitizenStatusId = value;
					this.SendPropertyChanged("CitizenStatusId");
					this.OnCitizenStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._MstUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedByUserId", DbType="Int NOT NULL")]
		public int UpdatedByUserId
		{
			get
			{
				return this._UpdatedByUserId;
			}
			set
			{
				if ((this._UpdatedByUserId != value))
				{
					if (this._MstUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._UpdatedByUserId = value;
					this.SendPropertyChanged("UpdatedByUserId");
					this.OnUpdatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDateTime
		{
			get
			{
				return this._UpdatedDateTime;
			}
			set
			{
				if ((this._UpdatedDateTime != value))
				{
					this.OnUpdatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDateTime = value;
					this.SendPropertyChanged("UpdatedDateTime");
					this.OnUpdatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizen_MstCitizensCard", Storage="_MstCitizensCards", ThisKey="Id", OtherKey="CitizenId")]
		public EntitySet<MstCitizensCard> MstCitizensCards
		{
			get
			{
				return this._MstCitizensCards;
			}
			set
			{
				this._MstCitizensCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizen_MstCitizensChildren", Storage="_MstCitizensChildrens", ThisKey="Id", OtherKey="CitizenId")]
		public EntitySet<MstCitizensChildren> MstCitizensChildrens
		{
			get
			{
				return this._MstCitizensChildrens;
			}
			set
			{
				this._MstCitizensChildrens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizen_MstCitizensEducation", Storage="_MstCitizensEducations", ThisKey="Id", OtherKey="CitizenId")]
		public EntitySet<MstCitizensEducation> MstCitizensEducations
		{
			get
			{
				return this._MstCitizensEducations;
			}
			set
			{
				this._MstCitizensEducations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBarangay_MstCitizen", Storage="_MstBarangay", ThisKey="ResidentialBarangayId", OtherKey="Id", IsForeignKey=true)]
		public MstBarangay MstBarangay
		{
			get
			{
				return this._MstBarangay.Entity;
			}
			set
			{
				MstBarangay previousValue = this._MstBarangay.Entity;
				if (((previousValue != value) 
							|| (this._MstBarangay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstBarangay.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstBarangay.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._ResidentialBarangayId = value.Id;
					}
					else
					{
						this._ResidentialBarangayId = default(int);
					}
					this.SendPropertyChanged("MstBarangay");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBarangay_MstCitizen1", Storage="_MstBarangay1", ThisKey="PermanentBarangayId", OtherKey="Id", IsForeignKey=true)]
		public MstBarangay MstBarangay1
		{
			get
			{
				return this._MstBarangay1.Entity;
			}
			set
			{
				MstBarangay previousValue = this._MstBarangay1.Entity;
				if (((previousValue != value) 
							|| (this._MstBarangay1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstBarangay1.Entity = null;
						previousValue.MstCitizens1.Remove(this);
					}
					this._MstBarangay1.Entity = value;
					if ((value != null))
					{
						value.MstCitizens1.Add(this);
						this._PermanentBarangayId = value.Id;
					}
					else
					{
						this._PermanentBarangayId = default(int);
					}
					this.SendPropertyChanged("MstBarangay1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBloodType_MstCitizen", Storage="_MstBloodType", ThisKey="BloodTypeId", OtherKey="Id", IsForeignKey=true)]
		public MstBloodType MstBloodType
		{
			get
			{
				return this._MstBloodType.Entity;
			}
			set
			{
				MstBloodType previousValue = this._MstBloodType.Entity;
				if (((previousValue != value) 
							|| (this._MstBloodType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstBloodType.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstBloodType.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._BloodTypeId = value.Id;
					}
					else
					{
						this._BloodTypeId = default(int);
					}
					this.SendPropertyChanged("MstBloodType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstCitizen", Storage="_MstUser", ThisKey="CreatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public MstUser MstUser
		{
			get
			{
				return this._MstUser.Entity;
			}
			set
			{
				MstUser previousValue = this._MstUser.Entity;
				if (((previousValue != value) 
							|| (this._MstUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUser.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstUser.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._CreatedByUserId = value.Id;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("MstUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstUser_MstCitizen1", Storage="_MstUser1", ThisKey="UpdatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public MstUser MstUser1
		{
			get
			{
				return this._MstUser1.Entity;
			}
			set
			{
				MstUser previousValue = this._MstUser1.Entity;
				if (((previousValue != value) 
							|| (this._MstUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstUser1.Entity = null;
						previousValue.MstCitizens1.Remove(this);
					}
					this._MstUser1.Entity = value;
					if ((value != null))
					{
						value.MstCitizens1.Add(this);
						this._UpdatedByUserId = value.Id;
					}
					else
					{
						this._UpdatedByUserId = default(int);
					}
					this.SendPropertyChanged("MstUser1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizenship_MstCitizen", Storage="_MstCitizenship", ThisKey="CitizenshipId", OtherKey="Id", IsForeignKey=true)]
		public MstCitizenship MstCitizenship
		{
			get
			{
				return this._MstCitizenship.Entity;
			}
			set
			{
				MstCitizenship previousValue = this._MstCitizenship.Entity;
				if (((previousValue != value) 
							|| (this._MstCitizenship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCitizenship.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstCitizenship.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._CitizenshipId = value.Id;
					}
					else
					{
						this._CitizenshipId = default(int);
					}
					this.SendPropertyChanged("MstCitizenship");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizensStatus_MstCitizen", Storage="_MstCitizensStatus", ThisKey="CitizenStatusId", OtherKey="Id", IsForeignKey=true)]
		public MstCitizensStatus MstCitizensStatus
		{
			get
			{
				return this._MstCitizensStatus.Entity;
			}
			set
			{
				MstCitizensStatus previousValue = this._MstCitizensStatus.Entity;
				if (((previousValue != value) 
							|| (this._MstCitizensStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCitizensStatus.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstCitizensStatus.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._CitizenStatusId = value.Id;
					}
					else
					{
						this._CitizenStatusId = default(int);
					}
					this.SendPropertyChanged("MstCitizensStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCity_MstCitizen", Storage="_MstCity", ThisKey="ResidentialCityId", OtherKey="Id", IsForeignKey=true)]
		public MstCity MstCity
		{
			get
			{
				return this._MstCity.Entity;
			}
			set
			{
				MstCity previousValue = this._MstCity.Entity;
				if (((previousValue != value) 
							|| (this._MstCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCity.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstCity.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._ResidentialCityId = value.Id;
					}
					else
					{
						this._ResidentialCityId = default(int);
					}
					this.SendPropertyChanged("MstCity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCity_MstCitizen1", Storage="_MstCity1", ThisKey="PermanentCityId", OtherKey="Id", IsForeignKey=true)]
		public MstCity MstCity1
		{
			get
			{
				return this._MstCity1.Entity;
			}
			set
			{
				MstCity previousValue = this._MstCity1.Entity;
				if (((previousValue != value) 
							|| (this._MstCity1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCity1.Entity = null;
						previousValue.MstCitizens1.Remove(this);
					}
					this._MstCity1.Entity = value;
					if ((value != null))
					{
						value.MstCitizens1.Add(this);
						this._PermanentCityId = value.Id;
					}
					else
					{
						this._PermanentCityId = default(int);
					}
					this.SendPropertyChanged("MstCity1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCivilStatus_MstCitizen", Storage="_MstCivilStatus", ThisKey="CivilStatusId", OtherKey="Id", IsForeignKey=true)]
		public MstCivilStatus MstCivilStatus
		{
			get
			{
				return this._MstCivilStatus.Entity;
			}
			set
			{
				MstCivilStatus previousValue = this._MstCivilStatus.Entity;
				if (((previousValue != value) 
							|| (this._MstCivilStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCivilStatus.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstCivilStatus.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._CivilStatusId = value.Id;
					}
					else
					{
						this._CivilStatusId = default(int);
					}
					this.SendPropertyChanged("MstCivilStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstOccupation_MstCitizen", Storage="_MstOccupation", ThisKey="OccupationId", OtherKey="Id", IsForeignKey=true)]
		public MstOccupation MstOccupation
		{
			get
			{
				return this._MstOccupation.Entity;
			}
			set
			{
				MstOccupation previousValue = this._MstOccupation.Entity;
				if (((previousValue != value) 
							|| (this._MstOccupation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstOccupation.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstOccupation.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._OccupationId = value.Id;
					}
					else
					{
						this._OccupationId = default(int);
					}
					this.SendPropertyChanged("MstOccupation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstOccupation_MstCitizen1", Storage="_MstOccupation1", ThisKey="SpouseOccupationId", OtherKey="Id", IsForeignKey=true)]
		public MstOccupation MstOccupation1
		{
			get
			{
				return this._MstOccupation1.Entity;
			}
			set
			{
				MstOccupation previousValue = this._MstOccupation1.Entity;
				if (((previousValue != value) 
							|| (this._MstOccupation1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstOccupation1.Entity = null;
						previousValue.MstCitizens1.Remove(this);
					}
					this._MstOccupation1.Entity = value;
					if ((value != null))
					{
						value.MstCitizens1.Add(this);
						this._SpouseOccupationId = value.Id;
					}
					else
					{
						this._SpouseOccupationId = default(int);
					}
					this.SendPropertyChanged("MstOccupation1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstCitizen", Storage="_MstProvince", ThisKey="ResidentialProvinceId", OtherKey="Id", IsForeignKey=true)]
		public MstProvince MstProvince
		{
			get
			{
				return this._MstProvince.Entity;
			}
			set
			{
				MstProvince previousValue = this._MstProvince.Entity;
				if (((previousValue != value) 
							|| (this._MstProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstProvince.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstProvince.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._ResidentialProvinceId = value.Id;
					}
					else
					{
						this._ResidentialProvinceId = default(int);
					}
					this.SendPropertyChanged("MstProvince");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstCitizen1", Storage="_MstProvince1", ThisKey="PermanentProvinceId", OtherKey="Id", IsForeignKey=true)]
		public MstProvince MstProvince1
		{
			get
			{
				return this._MstProvince1.Entity;
			}
			set
			{
				MstProvince previousValue = this._MstProvince1.Entity;
				if (((previousValue != value) 
							|| (this._MstProvince1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstProvince1.Entity = null;
						previousValue.MstCitizens1.Remove(this);
					}
					this._MstProvince1.Entity = value;
					if ((value != null))
					{
						value.MstCitizens1.Add(this);
						this._PermanentProvinceId = value.Id;
					}
					else
					{
						this._PermanentProvinceId = default(int);
					}
					this.SendPropertyChanged("MstProvince1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstSex_MstCitizen", Storage="_MstSex", ThisKey="SexId", OtherKey="Id", IsForeignKey=true)]
		public MstSex MstSex
		{
			get
			{
				return this._MstSex.Entity;
			}
			set
			{
				MstSex previousValue = this._MstSex.Entity;
				if (((previousValue != value) 
							|| (this._MstSex.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstSex.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstSex.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._SexId = value.Id;
					}
					else
					{
						this._SexId = default(int);
					}
					this.SendPropertyChanged("MstSex");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstTypeOfCitizenship_MstCitizen", Storage="_MstTypeOfCitizenship", ThisKey="TypeOfCitizenshipId", OtherKey="Id", IsForeignKey=true)]
		public MstTypeOfCitizenship MstTypeOfCitizenship
		{
			get
			{
				return this._MstTypeOfCitizenship.Entity;
			}
			set
			{
				MstTypeOfCitizenship previousValue = this._MstTypeOfCitizenship.Entity;
				if (((previousValue != value) 
							|| (this._MstTypeOfCitizenship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstTypeOfCitizenship.Entity = null;
						previousValue.MstCitizens.Remove(this);
					}
					this._MstTypeOfCitizenship.Entity = value;
					if ((value != null))
					{
						value.MstCitizens.Add(this);
						this._TypeOfCitizenshipId = value.Id;
					}
					else
					{
						this._TypeOfCitizenshipId = default(int);
					}
					this.SendPropertyChanged("MstTypeOfCitizenship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizensCards(MstCitizensCard entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizen = this;
		}
		
		private void detach_MstCitizensCards(MstCitizensCard entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizen = null;
		}
		
		private void attach_MstCitizensChildrens(MstCitizensChildren entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizen = this;
		}
		
		private void detach_MstCitizensChildrens(MstCitizensChildren entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizen = null;
		}
		
		private void attach_MstCitizensEducations(MstCitizensEducation entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizen = this;
		}
		
		private void detach_MstCitizensEducations(MstCitizensEducation entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCitizensCard")]
	public partial class MstCitizensCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CitizenId;
		
		private string _CardNumber;
		
		private decimal _TotalBalance;
		
		private int _CardStatusId;
		
		private EntityRef<MstCitizen> _MstCitizen;
		
		private EntityRef<MstCitizensCardStatus> _MstCitizensCardStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCitizenIdChanging(int value);
    partial void OnCitizenIdChanged();
    partial void OnCardNumberChanging(string value);
    partial void OnCardNumberChanged();
    partial void OnTotalBalanceChanging(decimal value);
    partial void OnTotalBalanceChanged();
    partial void OnCardStatusIdChanging(int value);
    partial void OnCardStatusIdChanged();
    #endregion
		
		public MstCitizensCard()
		{
			this._MstCitizen = default(EntityRef<MstCitizen>);
			this._MstCitizensCardStatus = default(EntityRef<MstCitizensCardStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenId", DbType="Int NOT NULL")]
		public int CitizenId
		{
			get
			{
				return this._CitizenId;
			}
			set
			{
				if ((this._CitizenId != value))
				{
					if (this._MstCitizen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCitizenIdChanging(value);
					this.SendPropertyChanging();
					this._CitizenId = value;
					this.SendPropertyChanged("CitizenId");
					this.OnCitizenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumber", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CardNumber
		{
			get
			{
				return this._CardNumber;
			}
			set
			{
				if ((this._CardNumber != value))
				{
					this.OnCardNumberChanging(value);
					this.SendPropertyChanging();
					this._CardNumber = value;
					this.SendPropertyChanged("CardNumber");
					this.OnCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalBalance", DbType="Decimal(18,5) NOT NULL")]
		public decimal TotalBalance
		{
			get
			{
				return this._TotalBalance;
			}
			set
			{
				if ((this._TotalBalance != value))
				{
					this.OnTotalBalanceChanging(value);
					this.SendPropertyChanging();
					this._TotalBalance = value;
					this.SendPropertyChanged("TotalBalance");
					this.OnTotalBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardStatusId", DbType="Int NOT NULL")]
		public int CardStatusId
		{
			get
			{
				return this._CardStatusId;
			}
			set
			{
				if ((this._CardStatusId != value))
				{
					if (this._MstCitizensCardStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CardStatusId = value;
					this.SendPropertyChanged("CardStatusId");
					this.OnCardStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizen_MstCitizensCard", Storage="_MstCitizen", ThisKey="CitizenId", OtherKey="Id", IsForeignKey=true)]
		public MstCitizen MstCitizen
		{
			get
			{
				return this._MstCitizen.Entity;
			}
			set
			{
				MstCitizen previousValue = this._MstCitizen.Entity;
				if (((previousValue != value) 
							|| (this._MstCitizen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCitizen.Entity = null;
						previousValue.MstCitizensCards.Remove(this);
					}
					this._MstCitizen.Entity = value;
					if ((value != null))
					{
						value.MstCitizensCards.Add(this);
						this._CitizenId = value.Id;
					}
					else
					{
						this._CitizenId = default(int);
					}
					this.SendPropertyChanged("MstCitizen");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizensCardStatus_MstCitizensCard", Storage="_MstCitizensCardStatus", ThisKey="CardStatusId", OtherKey="Id", IsForeignKey=true)]
		public MstCitizensCardStatus MstCitizensCardStatus
		{
			get
			{
				return this._MstCitizensCardStatus.Entity;
			}
			set
			{
				MstCitizensCardStatus previousValue = this._MstCitizensCardStatus.Entity;
				if (((previousValue != value) 
							|| (this._MstCitizensCardStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCitizensCardStatus.Entity = null;
						previousValue.MstCitizensCards.Remove(this);
					}
					this._MstCitizensCardStatus.Entity = value;
					if ((value != null))
					{
						value.MstCitizensCards.Add(this);
						this._CardStatusId = value.Id;
					}
					else
					{
						this._CardStatusId = default(int);
					}
					this.SendPropertyChanged("MstCitizensCardStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCitizensCardStatus")]
	public partial class MstCitizensCardStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CardStatus;
		
		private EntitySet<MstCitizensCard> _MstCitizensCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCardStatusChanging(string value);
    partial void OnCardStatusChanged();
    #endregion
		
		public MstCitizensCardStatus()
		{
			this._MstCitizensCards = new EntitySet<MstCitizensCard>(new Action<MstCitizensCard>(this.attach_MstCitizensCards), new Action<MstCitizensCard>(this.detach_MstCitizensCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardStatus", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CardStatus
		{
			get
			{
				return this._CardStatus;
			}
			set
			{
				if ((this._CardStatus != value))
				{
					this.OnCardStatusChanging(value);
					this.SendPropertyChanging();
					this._CardStatus = value;
					this.SendPropertyChanged("CardStatus");
					this.OnCardStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizensCardStatus_MstCitizensCard", Storage="_MstCitizensCards", ThisKey="Id", OtherKey="CardStatusId")]
		public EntitySet<MstCitizensCard> MstCitizensCards
		{
			get
			{
				return this._MstCitizensCards;
			}
			set
			{
				this._MstCitizensCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizensCards(MstCitizensCard entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizensCardStatus = this;
		}
		
		private void detach_MstCitizensCards(MstCitizensCard entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizensCardStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCitizensChildren")]
	public partial class MstCitizensChildren : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CitizenId;
		
		private string _Fullname;
		
		private System.DateTime _DateOfBirth;
		
		private EntityRef<MstCitizen> _MstCitizen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCitizenIdChanging(int value);
    partial void OnCitizenIdChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    #endregion
		
		public MstCitizensChildren()
		{
			this._MstCitizen = default(EntityRef<MstCitizen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenId", DbType="Int NOT NULL")]
		public int CitizenId
		{
			get
			{
				return this._CitizenId;
			}
			set
			{
				if ((this._CitizenId != value))
				{
					if (this._MstCitizen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCitizenIdChanging(value);
					this.SendPropertyChanging();
					this._CitizenId = value;
					this.SendPropertyChanged("CitizenId");
					this.OnCitizenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizen_MstCitizensChildren", Storage="_MstCitizen", ThisKey="CitizenId", OtherKey="Id", IsForeignKey=true)]
		public MstCitizen MstCitizen
		{
			get
			{
				return this._MstCitizen.Entity;
			}
			set
			{
				MstCitizen previousValue = this._MstCitizen.Entity;
				if (((previousValue != value) 
							|| (this._MstCitizen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCitizen.Entity = null;
						previousValue.MstCitizensChildrens.Remove(this);
					}
					this._MstCitizen.Entity = value;
					if ((value != null))
					{
						value.MstCitizensChildrens.Add(this);
						this._CitizenId = value.Id;
					}
					else
					{
						this._CitizenId = default(int);
					}
					this.SendPropertyChanged("MstCitizen");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCitizensEducation")]
	public partial class MstCitizensEducation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CitizenId;
		
		private int _EducationLevelId;
		
		private string _NameOfSchool;
		
		private string _Degree;
		
		private System.DateTime _PeriodFrom;
		
		private System.DateTime _PeriodTo;
		
		private System.Nullable<decimal> _UnitsEarned;
		
		private System.Nullable<int> _YearGraduated;
		
		private EntityRef<MstCitizen> _MstCitizen;
		
		private EntityRef<MstCitizensEducationLevel> _MstCitizensEducationLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCitizenIdChanging(int value);
    partial void OnCitizenIdChanged();
    partial void OnEducationLevelIdChanging(int value);
    partial void OnEducationLevelIdChanged();
    partial void OnNameOfSchoolChanging(string value);
    partial void OnNameOfSchoolChanged();
    partial void OnDegreeChanging(string value);
    partial void OnDegreeChanged();
    partial void OnPeriodFromChanging(System.DateTime value);
    partial void OnPeriodFromChanged();
    partial void OnPeriodToChanging(System.DateTime value);
    partial void OnPeriodToChanged();
    partial void OnUnitsEarnedChanging(System.Nullable<decimal> value);
    partial void OnUnitsEarnedChanged();
    partial void OnYearGraduatedChanging(System.Nullable<int> value);
    partial void OnYearGraduatedChanged();
    #endregion
		
		public MstCitizensEducation()
		{
			this._MstCitizen = default(EntityRef<MstCitizen>);
			this._MstCitizensEducationLevel = default(EntityRef<MstCitizensEducationLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenId", DbType="Int NOT NULL")]
		public int CitizenId
		{
			get
			{
				return this._CitizenId;
			}
			set
			{
				if ((this._CitizenId != value))
				{
					if (this._MstCitizen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCitizenIdChanging(value);
					this.SendPropertyChanging();
					this._CitizenId = value;
					this.SendPropertyChanged("CitizenId");
					this.OnCitizenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationLevelId", DbType="Int NOT NULL")]
		public int EducationLevelId
		{
			get
			{
				return this._EducationLevelId;
			}
			set
			{
				if ((this._EducationLevelId != value))
				{
					if (this._MstCitizensEducationLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEducationLevelIdChanging(value);
					this.SendPropertyChanging();
					this._EducationLevelId = value;
					this.SendPropertyChanged("EducationLevelId");
					this.OnEducationLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfSchool", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string NameOfSchool
		{
			get
			{
				return this._NameOfSchool;
			}
			set
			{
				if ((this._NameOfSchool != value))
				{
					this.OnNameOfSchoolChanging(value);
					this.SendPropertyChanging();
					this._NameOfSchool = value;
					this.SendPropertyChanged("NameOfSchool");
					this.OnNameOfSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degree", DbType="NVarChar(250)")]
		public string Degree
		{
			get
			{
				return this._Degree;
			}
			set
			{
				if ((this._Degree != value))
				{
					this.OnDegreeChanging(value);
					this.SendPropertyChanging();
					this._Degree = value;
					this.SendPropertyChanged("Degree");
					this.OnDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodFrom", DbType="DateTime NOT NULL")]
		public System.DateTime PeriodFrom
		{
			get
			{
				return this._PeriodFrom;
			}
			set
			{
				if ((this._PeriodFrom != value))
				{
					this.OnPeriodFromChanging(value);
					this.SendPropertyChanging();
					this._PeriodFrom = value;
					this.SendPropertyChanged("PeriodFrom");
					this.OnPeriodFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodTo", DbType="DateTime NOT NULL")]
		public System.DateTime PeriodTo
		{
			get
			{
				return this._PeriodTo;
			}
			set
			{
				if ((this._PeriodTo != value))
				{
					this.OnPeriodToChanging(value);
					this.SendPropertyChanging();
					this._PeriodTo = value;
					this.SendPropertyChanged("PeriodTo");
					this.OnPeriodToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitsEarned", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> UnitsEarned
		{
			get
			{
				return this._UnitsEarned;
			}
			set
			{
				if ((this._UnitsEarned != value))
				{
					this.OnUnitsEarnedChanging(value);
					this.SendPropertyChanging();
					this._UnitsEarned = value;
					this.SendPropertyChanged("UnitsEarned");
					this.OnUnitsEarnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearGraduated", DbType="Int")]
		public System.Nullable<int> YearGraduated
		{
			get
			{
				return this._YearGraduated;
			}
			set
			{
				if ((this._YearGraduated != value))
				{
					this.OnYearGraduatedChanging(value);
					this.SendPropertyChanging();
					this._YearGraduated = value;
					this.SendPropertyChanged("YearGraduated");
					this.OnYearGraduatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizen_MstCitizensEducation", Storage="_MstCitizen", ThisKey="CitizenId", OtherKey="Id", IsForeignKey=true)]
		public MstCitizen MstCitizen
		{
			get
			{
				return this._MstCitizen.Entity;
			}
			set
			{
				MstCitizen previousValue = this._MstCitizen.Entity;
				if (((previousValue != value) 
							|| (this._MstCitizen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCitizen.Entity = null;
						previousValue.MstCitizensEducations.Remove(this);
					}
					this._MstCitizen.Entity = value;
					if ((value != null))
					{
						value.MstCitizensEducations.Add(this);
						this._CitizenId = value.Id;
					}
					else
					{
						this._CitizenId = default(int);
					}
					this.SendPropertyChanged("MstCitizen");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizensEducationLevel_MstCitizensEducation", Storage="_MstCitizensEducationLevel", ThisKey="EducationLevelId", OtherKey="Id", IsForeignKey=true)]
		public MstCitizensEducationLevel MstCitizensEducationLevel
		{
			get
			{
				return this._MstCitizensEducationLevel.Entity;
			}
			set
			{
				MstCitizensEducationLevel previousValue = this._MstCitizensEducationLevel.Entity;
				if (((previousValue != value) 
							|| (this._MstCitizensEducationLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCitizensEducationLevel.Entity = null;
						previousValue.MstCitizensEducations.Remove(this);
					}
					this._MstCitizensEducationLevel.Entity = value;
					if ((value != null))
					{
						value.MstCitizensEducations.Add(this);
						this._EducationLevelId = value.Id;
					}
					else
					{
						this._EducationLevelId = default(int);
					}
					this.SendPropertyChanged("MstCitizensEducationLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCitizensEducationLevel")]
	public partial class MstCitizensEducationLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EducationLevel;
		
		private EntitySet<MstCitizensEducation> _MstCitizensEducations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEducationLevelChanging(string value);
    partial void OnEducationLevelChanged();
    #endregion
		
		public MstCitizensEducationLevel()
		{
			this._MstCitizensEducations = new EntitySet<MstCitizensEducation>(new Action<MstCitizensEducation>(this.attach_MstCitizensEducations), new Action<MstCitizensEducation>(this.detach_MstCitizensEducations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationLevel", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string EducationLevel
		{
			get
			{
				return this._EducationLevel;
			}
			set
			{
				if ((this._EducationLevel != value))
				{
					this.OnEducationLevelChanging(value);
					this.SendPropertyChanging();
					this._EducationLevel = value;
					this.SendPropertyChanged("EducationLevel");
					this.OnEducationLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizensEducationLevel_MstCitizensEducation", Storage="_MstCitizensEducations", ThisKey="Id", OtherKey="EducationLevelId")]
		public EntitySet<MstCitizensEducation> MstCitizensEducations
		{
			get
			{
				return this._MstCitizensEducations;
			}
			set
			{
				this._MstCitizensEducations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizensEducations(MstCitizensEducation entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizensEducationLevel = this;
		}
		
		private void detach_MstCitizensEducations(MstCitizensEducation entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizensEducationLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCitizenship")]
	public partial class MstCitizenship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Citizenship;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCitizenshipChanging(string value);
    partial void OnCitizenshipChanged();
    #endregion
		
		public MstCitizenship()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citizenship", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Citizenship
		{
			get
			{
				return this._Citizenship;
			}
			set
			{
				if ((this._Citizenship != value))
				{
					this.OnCitizenshipChanging(value);
					this.SendPropertyChanging();
					this._Citizenship = value;
					this.SendPropertyChanged("Citizenship");
					this.OnCitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizenship_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="CitizenshipId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizenship = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizenship = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCitizensStatus")]
	public partial class MstCitizensStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CitizenStatus;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCitizenStatusChanging(string value);
    partial void OnCitizenStatusChanged();
    #endregion
		
		public MstCitizensStatus()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenStatus", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CitizenStatus
		{
			get
			{
				return this._CitizenStatus;
			}
			set
			{
				if ((this._CitizenStatus != value))
				{
					this.OnCitizenStatusChanging(value);
					this.SendPropertyChanging();
					this._CitizenStatus = value;
					this.SendPropertyChanged("CitizenStatus");
					this.OnCitizenStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCitizensStatus_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="CitizenStatusId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizensStatus = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCitizensStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCity")]
	public partial class MstCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _City;
		
		private int _ProvinceId;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
		private EntitySet<MstCitizen> _MstCitizens1;
		
		private EntityRef<MstProvince> _MstProvince;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    #endregion
		
		public MstCity()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			this._MstCitizens1 = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens1), new Action<MstCitizen>(this.detach_MstCitizens1));
			this._MstProvince = default(EntityRef<MstProvince>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NChar(250) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", DbType="Int NOT NULL")]
		public int ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if ((this._ProvinceId != value))
				{
					if (this._MstProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCity_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="ResidentialCityId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCity_MstCitizen1", Storage="_MstCitizens1", ThisKey="Id", OtherKey="PermanentCityId")]
		public EntitySet<MstCitizen> MstCitizens1
		{
			get
			{
				return this._MstCitizens1;
			}
			set
			{
				this._MstCitizens1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstCity", Storage="_MstProvince", ThisKey="ProvinceId", OtherKey="Id", IsForeignKey=true)]
		public MstProvince MstProvince
		{
			get
			{
				return this._MstProvince.Entity;
			}
			set
			{
				MstProvince previousValue = this._MstProvince.Entity;
				if (((previousValue != value) 
							|| (this._MstProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstProvince.Entity = null;
						previousValue.MstCities.Remove(this);
					}
					this._MstProvince.Entity = value;
					if ((value != null))
					{
						value.MstCities.Add(this);
						this._ProvinceId = value.Id;
					}
					else
					{
						this._ProvinceId = default(int);
					}
					this.SendPropertyChanged("MstProvince");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCity = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCity = null;
		}
		
		private void attach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCity1 = this;
		}
		
		private void detach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCity1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCivilStatus")]
	public partial class MstCivilStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CivilStatus;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCivilStatusChanging(string value);
    partial void OnCivilStatusChanged();
    #endregion
		
		public MstCivilStatus()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CivilStatus", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CivilStatus
		{
			get
			{
				return this._CivilStatus;
			}
			set
			{
				if ((this._CivilStatus != value))
				{
					this.OnCivilStatusChanging(value);
					this.SendPropertyChanging();
					this._CivilStatus = value;
					this.SendPropertyChanged("CivilStatus");
					this.OnCivilStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCivilStatus_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="CivilStatusId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCivilStatus = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstCivilStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCountry")]
	public partial class MstCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Country;
		
		private EntitySet<MstRegion> _MstRegions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public MstCountry()
		{
			this._MstRegions = new EntitySet<MstRegion>(new Action<MstRegion>(this.attach_MstRegions), new Action<MstRegion>(this.detach_MstRegions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCountry_MstRegion", Storage="_MstRegions", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<MstRegion> MstRegions
		{
			get
			{
				return this._MstRegions;
			}
			set
			{
				this._MstRegions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstRegions(MstRegion entity)
		{
			this.SendPropertyChanging();
			entity.MstCountry = this;
		}
		
		private void detach_MstRegions(MstRegion entity)
		{
			this.SendPropertyChanging();
			entity.MstCountry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstOccupation")]
	public partial class MstOccupation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Occupation;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
		private EntitySet<MstCitizen> _MstCitizens1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    #endregion
		
		public MstOccupation()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			this._MstCitizens1 = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens1), new Action<MstCitizen>(this.detach_MstCitizens1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstOccupation_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="OccupationId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstOccupation_MstCitizen1", Storage="_MstCitizens1", ThisKey="Id", OtherKey="SpouseOccupationId")]
		public EntitySet<MstCitizen> MstCitizens1
		{
			get
			{
				return this._MstCitizens1;
			}
			set
			{
				this._MstCitizens1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstOccupation = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstOccupation = null;
		}
		
		private void attach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstOccupation1 = this;
		}
		
		private void detach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstOccupation1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstProvince")]
	public partial class MstProvince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Province;
		
		private int _RegionId;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
		private EntitySet<MstCitizen> _MstCitizens1;
		
		private EntitySet<MstCity> _MstCities;
		
		private EntityRef<MstRegion> _MstRegion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnRegionIdChanging(int value);
    partial void OnRegionIdChanged();
    #endregion
		
		public MstProvince()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			this._MstCitizens1 = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens1), new Action<MstCitizen>(this.detach_MstCitizens1));
			this._MstCities = new EntitySet<MstCity>(new Action<MstCity>(this.attach_MstCities), new Action<MstCity>(this.detach_MstCities));
			this._MstRegion = default(EntityRef<MstRegion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionId", DbType="Int NOT NULL")]
		public int RegionId
		{
			get
			{
				return this._RegionId;
			}
			set
			{
				if ((this._RegionId != value))
				{
					if (this._MstRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIdChanging(value);
					this.SendPropertyChanging();
					this._RegionId = value;
					this.SendPropertyChanged("RegionId");
					this.OnRegionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="ResidentialProvinceId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstCitizen1", Storage="_MstCitizens1", ThisKey="Id", OtherKey="PermanentProvinceId")]
		public EntitySet<MstCitizen> MstCitizens1
		{
			get
			{
				return this._MstCitizens1;
			}
			set
			{
				this._MstCitizens1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstCity", Storage="_MstCities", ThisKey="Id", OtherKey="ProvinceId")]
		public EntitySet<MstCity> MstCities
		{
			get
			{
				return this._MstCities;
			}
			set
			{
				this._MstCities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstRegion_MstProvince", Storage="_MstRegion", ThisKey="RegionId", OtherKey="Id", IsForeignKey=true)]
		public MstRegion MstRegion
		{
			get
			{
				return this._MstRegion.Entity;
			}
			set
			{
				MstRegion previousValue = this._MstRegion.Entity;
				if (((previousValue != value) 
							|| (this._MstRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstRegion.Entity = null;
						previousValue.MstProvinces.Remove(this);
					}
					this._MstRegion.Entity = value;
					if ((value != null))
					{
						value.MstProvinces.Add(this);
						this._RegionId = value.Id;
					}
					else
					{
						this._RegionId = default(int);
					}
					this.SendPropertyChanged("MstRegion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince = null;
		}
		
		private void attach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince1 = this;
		}
		
		private void detach_MstCitizens1(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince1 = null;
		}
		
		private void attach_MstCities(MstCity entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince = this;
		}
		
		private void detach_MstCities(MstCity entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstRegion")]
	public partial class MstRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Region;
		
		private int _CountryId;
		
		private EntitySet<MstProvince> _MstProvinces;
		
		private EntityRef<MstCountry> _MstCountry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    #endregion
		
		public MstRegion()
		{
			this._MstProvinces = new EntitySet<MstProvince>(new Action<MstProvince>(this.attach_MstProvinces), new Action<MstProvince>(this.detach_MstProvinces));
			this._MstCountry = default(EntityRef<MstCountry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._MstCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstRegion_MstProvince", Storage="_MstProvinces", ThisKey="Id", OtherKey="RegionId")]
		public EntitySet<MstProvince> MstProvinces
		{
			get
			{
				return this._MstProvinces;
			}
			set
			{
				this._MstProvinces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCountry_MstRegion", Storage="_MstCountry", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public MstCountry MstCountry
		{
			get
			{
				return this._MstCountry.Entity;
			}
			set
			{
				MstCountry previousValue = this._MstCountry.Entity;
				if (((previousValue != value) 
							|| (this._MstCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCountry.Entity = null;
						previousValue.MstRegions.Remove(this);
					}
					this._MstCountry.Entity = value;
					if ((value != null))
					{
						value.MstRegions.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("MstCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstProvinces(MstProvince entity)
		{
			this.SendPropertyChanging();
			entity.MstRegion = this;
		}
		
		private void detach_MstProvinces(MstProvince entity)
		{
			this.SendPropertyChanging();
			entity.MstRegion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstSex")]
	public partial class MstSex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Sex;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    #endregion
		
		public MstSex()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstSex_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="SexId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstSex = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstSex = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstTypeOfCitizenship")]
	public partial class MstTypeOfCitizenship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeOfCitizenship;
		
		private EntitySet<MstCitizen> _MstCitizens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeOfCitizenshipChanging(string value);
    partial void OnTypeOfCitizenshipChanged();
    #endregion
		
		public MstTypeOfCitizenship()
		{
			this._MstCitizens = new EntitySet<MstCitizen>(new Action<MstCitizen>(this.attach_MstCitizens), new Action<MstCitizen>(this.detach_MstCitizens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfCitizenship", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string TypeOfCitizenship
		{
			get
			{
				return this._TypeOfCitizenship;
			}
			set
			{
				if ((this._TypeOfCitizenship != value))
				{
					this.OnTypeOfCitizenshipChanging(value);
					this.SendPropertyChanging();
					this._TypeOfCitizenship = value;
					this.SendPropertyChanged("TypeOfCitizenship");
					this.OnTypeOfCitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstTypeOfCitizenship_MstCitizen", Storage="_MstCitizens", ThisKey="Id", OtherKey="TypeOfCitizenshipId")]
		public EntitySet<MstCitizen> MstCitizens
		{
			get
			{
				return this._MstCitizens;
			}
			set
			{
				this._MstCitizens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstTypeOfCitizenship = this;
		}
		
		private void detach_MstCitizens(MstCitizen entity)
		{
			this.SendPropertyChanging();
			entity.MstTypeOfCitizenship = null;
		}
	}
}
#pragma warning restore 1591
